{"version":3,"sources":["components/ToggleBox.js","components/Jugadores.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["ToggleBox","props","state","opened","toggleBox","bind","this","setState","title","children","className","onClick","class","React","Component","useStyles","makeStyles","table","minWidth","createData","name","elo","rows","Jugadores","classes","TableContainer","component","Paper","Table","aria-label","size","TableHead","TableRow","TableCell","align","TableBody","map","row","key","scope","Header","J1Result","J2Result","theme","root","margin","spacing","Boolean","window","location","hostname","match","ReactDOM","render","useState","j1Result","setJ1Result","j2Result","setJ2Result","noValidate","autoComplete","TextField","label","defaultValue","placeholder","onChange","e","target","value","Divider","Button","variant","color","win","loss","Elo","require","won","parseInt","lost","result","calculate","playerRating","opponentRating","console","log","calculateElo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f032ec76.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass ToggleBox extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\topened: false,\r\n\t\t};\r\n\t\tthis.toggleBox = this.toggleBox.bind(this);\r\n\t}\r\n  \r\n\ttoggleBox() {\r\n\t\tconst { opened } = this.state;\r\n\t\tthis.setState({\r\n\t\t\topened: !opened,\r\n\t\t});\r\n\t}\r\n  \r\n\trender() {\r\n\t\tvar { title, children } = this.props;\r\n\t\tconst { opened } = this.state;\r\n\r\n\t\tif (opened){\r\n\t\t\ttitle ='Ranking';\r\n\t\t}else{\r\n\t\t\ttitle ='Ranking';\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"box\">\r\n\t\t\t\t<div className=\"boxTitle\" onClick={this.toggleBox}>\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</div>\r\n\t\t\t\t{opened && (\t\t\t\t\t\r\n\t\t\t\t\t<div class=\"boxContent\">\r\n\t\t\t\t\t\t{children}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ToggleBox;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper}  from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 200,\r\n  },\r\n});\r\n\r\nfunction createData(name, elo) {\r\n  return { name, elo};\r\n}\r\n\r\nconst rows = [\r\n  createData('Julio', 1120),\r\n  createData('Roberto', 1100),\r\n  createData('Pablo', 1000),\r\n  createData('Sebastian', 980),\r\n  createData('Alan', 975),\r\n];\r\n\r\nexport default function Jugadores() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\" size=\"medium\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align =\"center\">JUGADOR</TableCell>\r\n            <TableCell align=\"center\">ELO</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map(row => (\r\n            <TableRow key={row.name}>\r\n              <TableCell \r\n              align=\"center\" component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell align=\"center\">{row.elo}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Component } from 'react';\r\n\r\nexport default class Header extends Component {\r\n    \r\n    render() {\r\n      return (\r\n        <div>\r\n          <h1>Ganador : {this.props.J1Result}</h1>\r\n          <h1>Perdedor : {this.props.J2Result}</h1>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n","import React from 'react';\nimport { useState } from 'react';\nimport ToggleBox from \"./components/ToggleBox\";\nimport Jugadores from \"./components/Jugadores\";\nimport Header from './components/Header';\nimport {Divider, Button, TextField, makeStyles} from '@material-ui/core/';\nimport './App.css';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function App() {\n\n  const classes = useStyles();\n\n  const [j1, setJ1] = useState('{');\n  const [j2, setJ2] = useState('nn');\n  const [j1Result, setJ1Result] = useState('0');\n  const [j2Result, setJ2Result] = useState('0');\n\n  function calculateElo(win, loss){\n    \n    var Elo = require('elo-rating');\n    var won = parseInt(win);\n    var lost = parseInt(loss);\n    var result = Elo.calculate(won, lost, true, 40);    \n\n      setJ1Result(result.playerRating);   \n\n      setJ2Result(result.opponentRating);\n\n    console.log('Ganador ELO:' + j1Result + ' -> nuevo ELO: ' + result.playerRating) // Output: 1735\n    console.log('Perdedor ELO:' + j2Result + ' -> nuevo ELO: ' + result.opponentRating) // Output: 1735\n    \n  }\n\n  return (\n    \n    <form className={classes.root} noValidate autoComplete=\"off\"> \n      <div className=\"App\">\n        <div className=\"Header\">\n          <Header J1Result={j1Result} J2Result={j2Result}/>\n          <TextField \n                label=\"ELO Ganador\"\n                defaultValue=\"\"\n                placeholder = \"ELO Ganador\" onChange={e => setJ1Result(e.target.value)}></TextField>\n            <TextField \n                label=\"ELO Perdedor\"\n                defaultValue=\"\"\n                placeholder = \"ELO Perdedor\" onChange={e => setJ2Result(e.target.value)}></TextField>\n            <Divider />\n            <Button variant=\"contained\" color=\"primary\" onClick={() => calculateElo(j1Result, j2Result)}>\n              Calcular ELO\n            </Button>\n        </div>\n        <div className=\"Table\">\n        <ToggleBox title=\"Tabla\">\n            <Jugadores />\n          </ToggleBox>\n        </div>\n\n      </div>\n    </form>\n    \n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}